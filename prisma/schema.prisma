generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl= env("DIRECT_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model IngestSettings {
  id        String       @id @default(cuid())
  type      CategoryType
  endpoint  String
  apiKey    String
  isEnabled Boolean      @default(false)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Category {
  id             Int                @id @default(autoincrement()) // 主键，自增
  name           String             // 分类名称
  url            String?
  type           CategoryType       // 分类类型（例如：Video, Novel, Picture, Comic）
  parentId       Int?               // 父分类ID，可为空
  parent         Category?          @relation("SubCategories", fields: [parentId], references: [id]) // 父分类关系
  subCategories  Category[]         @relation("SubCategories") // 子分类关系
  comics         Comic[]            // 关联的漫画
  novels         Novel[]            // 关联的小说
  pictures       Picture[]          // 关联的图片
  videos         Video[]            // 关联的视频
  mappings       CategoryMapping[]  // 分类映射关系
  isActive       Boolean            @default(true) // 分类是否激活，默认为true
  order          Int                @default(0) // 排序顺序，默认为0

  @@index([parentId]) // 在parentId上创建索引以提高查询性能
}

model CategoryMapping {
  id            Int         @id @default(autoincrement())
  externalId    Int
  internalId    Int
  externalApiId Int
  category      Category    @relation(fields: [internalId], references: [id])
  externalApi   ExternalApi @relation(fields: [externalApiId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([externalId, externalApiId])
  @@index([internalId])
  @@index([externalApiId])
}

model ExternalApi {
  id              Int               @id @default(autoincrement())
  name            String
  url             String
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  categoryMappings CategoryMapping[]

  @@index([isActive])
}

model Video {
  id          Int      @id @default(autoincrement())
  categoryId  Int
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  views       Int      @default(0)
  isActive    Boolean  @default(true)
  coverUrl    String
  category    Category @relation(fields: [categoryId], references: [id])
  videoSources VideoSource[]

  @@index([categoryId])
  @@index([isActive])
}

model VideoSource {
  id         Int      @id @default(autoincrement())
  video      Video    @relation(fields: [videoId], references: [id])
  videoId    Int
  playUrl    String
  playerType String   @default("dplayer")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([videoId])
}


model Novel {
  id          Int            @id @default(autoincrement())
  externalId  String?         @unique // 添加这个字段
  categoryId  Int
  title       String
  author      String
  description String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  views   Int            @default(0)
  isActive    Boolean        @default(true)
  coverUrl    String?
  category    Category       @relation(fields: [categoryId], references: [id])
  chapters    NovelChapter[]

  @@index([categoryId])
  @@index([isActive])
}

model NovelChapter {
  id            Int      @id @default(autoincrement())
  novelId       Int
  chapterNumber Int
  title         String
  content       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  novel         Novel    @relation(fields: [novelId], references: [id])
}

model Picture {
  id          Int            @id @default(autoincrement())
  categoryId  Int
  title       String
  description String?
  coverUrl    String?
  views       Int            @default(0)
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  category    Category       @relation(fields: [categoryId], references: [id])
  images      PictureImage[]

  @@index([categoryId])
  @@index([isActive])
}

model PictureImage {
  id        Int      @id @default(autoincrement())
  path      String
  width     Int
  height    Int
  size      Int
  mimeType  String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  pictureId Int
  picture   Picture  @relation(fields: [pictureId], references: [id])

  @@index([pictureId])
}

model Comic {
  id          Int            @id @default(autoincrement())
  categoryId  Int
  title       String
  author      String?
  description String?
  coverUrl    String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  views       Int            @default(0)
  isActive    Boolean        @default(true)
  category    Category       @relation(fields: [categoryId], references: [id])
  chapters    ComicChapter[]

  @@index([categoryId])
  @@index([isActive])
}

model ComicChapter {
  id            Int          @id @default(autoincrement())
  comicId       Int
  chapterNumber Int
  title         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  comic         Comic        @relation(fields: [comicId], references: [id])
  images        ComicImage[]

  @@index([comicId])
}

model ComicImage {
  id        Int          @id @default(autoincrement())
  chapterId Int
  path      String
  width     Int
  height    Int
  size      Int
  mimeType  String
  order     Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  chapter   ComicChapter @relation(fields: [chapterId], references: [id])

  @@index([chapterId])
}

model Advertisement {
  id        Int               @id @default(autoincrement())
  title     String
  imagePath String
  linkUrl   String
  startDate DateTime
  endDate   DateTime
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  order     Int
  type      AdvertisementType
}

model FriendLink {
  id        Int                @id @default(autoincrement())
  name      String
  url       String
  logoUrl   String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  order     Int
  position  FriendLinkPosition
}

model Tag {
  id        Int         @id @default(autoincrement())
  name      String
  order     Int
  url       String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  position  TagPosition
}
model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  role          String    @default("user")
  salt          String
  sessions      Session[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model SystemSettings {
  id        String   @id @default(cuid())
  category  String
  key       String
  value     Json
  updatedAt DateTime @updatedAt

  @@unique([category, key])
}
enum CategoryType {
  Video
  Novel
  Picture
  Comic
}

enum AdvertisementType {
  BANNER
  ICON
}

enum FriendLinkPosition {
  TOP
  BOTTOM
}

enum TagPosition {
  TOP
  BOTTOM
}
